/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * Simple CRUD API
 * A simple CRUD API for user management.
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  User
} from './models'

export const getGetUsersResponseMock = (overrideResponse: any = {}): User[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({email: faker.word.sample(), firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]), username: faker.word.sample(), ...overrideResponse})))

export const getPostUsersResponseMock = (overrideResponse: any = {}): User => ({email: faker.word.sample(), firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]), username: faker.word.sample(), ...overrideResponse})

export const getGetUsersUserIdResponseMock = (overrideResponse: any = {}): User => ({email: faker.word.sample(), firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]), username: faker.word.sample(), ...overrideResponse})

export const getPutUsersUserIdResponseMock = (overrideResponse: any = {}): User => ({email: faker.word.sample(), firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]), username: faker.word.sample(), ...overrideResponse})


export const getGetUsersMockHandler = (overrideResponse?: User[]) => {
  return http.get('*/users', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetUsersResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostUsersMockHandler = (overrideResponse?: User) => {
  return http.post('*/users', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getPostUsersResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetUsersUserIdMockHandler = (overrideResponse?: User) => {
  return http.get('*/users/:userId', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetUsersUserIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPutUsersUserIdMockHandler = (overrideResponse?: User) => {
  return http.put('*/users/:userId', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getPutUsersUserIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteUsersUserIdMockHandler = () => {
  return http.delete('*/users/:userId', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getSimpleCRUDAPIMock = () => [
  getGetUsersMockHandler(),
  getPostUsersMockHandler(),
  getGetUsersUserIdMockHandler(),
  getPutUsersUserIdMockHandler(),
  getDeleteUsersUserIdMockHandler()]
